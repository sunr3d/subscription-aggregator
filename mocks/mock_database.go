// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	infra "github.com/sunr3d/subscription-aggregator/internal/interfaces/infra"

	models "github.com/sunr3d/subscription-aggregator/models"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *Database) Create(ctx context.Context, data models.Subscription) (int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Subscription) (int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Subscription) int); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Subscription) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Database_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.Subscription
func (_e *Database_Expecter) Create(ctx interface{}, data interface{}) *Database_Create_Call {
	return &Database_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *Database_Create_Call) Run(run func(ctx context.Context, data models.Subscription)) *Database_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Subscription))
	})
	return _c
}

func (_c *Database_Create_Call) Return(_a0 int, _a1 error) *Database_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_Create_Call) RunAndReturn(run func(context.Context, models.Subscription) (int, error)) *Database_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Database) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Database_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Database_Expecter) Delete(ctx interface{}, id interface{}) *Database_Delete_Call {
	return &Database_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Database_Delete_Call) Run(run func(ctx context.Context, id int)) *Database_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Database_Delete_Call) Return(_a0 error) *Database_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Delete_Call) RunAndReturn(run func(context.Context, int) error) *Database_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Database) GetByID(ctx context.Context, id int) (models.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Subscription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Database_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Database_Expecter) GetByID(ctx interface{}, id interface{}) *Database_GetByID_Call {
	return &Database_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Database_GetByID_Call) Run(run func(ctx context.Context, id int)) *Database_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Database_GetByID_Call) Return(_a0 models.Subscription, _a1 error) *Database_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetByID_Call) RunAndReturn(run func(context.Context, int) (models.Subscription, error)) *Database_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *Database) List(ctx context.Context, filter infra.ListFilter) ([]models.Subscription, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, infra.ListFilter) ([]models.Subscription, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, infra.ListFilter) []models.Subscription); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, infra.ListFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Database_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter infra.ListFilter
func (_e *Database_Expecter) List(ctx interface{}, filter interface{}) *Database_List_Call {
	return &Database_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *Database_List_Call) Run(run func(ctx context.Context, filter infra.ListFilter)) *Database_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(infra.ListFilter))
	})
	return _c
}

func (_c *Database_List_Call) Return(_a0 []models.Subscription, _a1 error) *Database_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_List_Call) RunAndReturn(run func(context.Context, infra.ListFilter) ([]models.Subscription, error)) *Database_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *Database) Update(ctx context.Context, data models.Subscription) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Subscription) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Database_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.Subscription
func (_e *Database_Expecter) Update(ctx interface{}, data interface{}) *Database_Update_Call {
	return &Database_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *Database_Update_Call) Run(run func(ctx context.Context, data models.Subscription)) *Database_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Subscription))
	})
	return _c
}

func (_c *Database_Update_Call) Return(_a0 error) *Database_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Update_Call) RunAndReturn(run func(context.Context, models.Subscription) error) *Database_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
