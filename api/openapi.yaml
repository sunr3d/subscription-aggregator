openapi: 3.1.0
info:
  title: Subscription Aggregator API
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Subscriptions
  - name: Analytics

paths:
  /subscriptions:
    post:
      tags: [Subscriptions]
      summary: Создать подписку
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, example: 123 }
        '400':
          $ref: '#/components/responses/BadRequest'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags: [Subscriptions]
      summary: Список подписок
      parameters:
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Subscription' }
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /subscriptions/{id}:
    get:
      tags: [Subscriptions]
      summary: Получить подписку
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subscription' }
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      tags: [Subscriptions]
      summary: Обновить подписку (частично)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSubscriptionRequest' }
      responses:
        '204': { description: Обновлено }
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags: [Subscriptions]
      summary: Удалить подписку
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Удалено }
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /subscriptions/total:
    get:
      tags: [Analytics]
      summary: Сумма за период
      parameters:
        - in: query
          name: period_start
          required: true
          schema: { type: string, example: '07-2025' }
        - in: query
          name: period_end
          required: true
          schema: { type: string, example: '12-2025' }
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_cost: { type: integer, example: 1200 }
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    Subscription:
      type: object
      properties:
        id: { type: integer, example: 1 }
        service_name: { type: string, example: Yandex Plus }
        price: { type: integer, example: 400 }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: '07-2025' }
        end_date: { type: string, example: '12-2025' }
    CreateSubscriptionRequest:
      type: object
      required: [service_name, price, user_id, start_date]
      properties:
        service_name: { type: string }
        price: { type: integer }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: '07-2025' }
        end_date: { type: string, example: '12-2025' }
    UpdateSubscriptionRequest:
      type: object
      properties:
        service_name: { type: string }
        price: { type: integer }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: '07-2025' }
        end_date: { type: string, example: '12-2025' }
    Error:
      type: object
      properties:
        error:
          type: string
          example: 'Сообщение об ошибке'

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Не найдено
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UnsupportedMediaType:
      description: Ожидается Content-Type - application/json
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
